hubble {
  cassandra {
     clusters = [
          {
            name = the group name that defines different environments of the same type of cluster this name is also the space you want to write to (e.g. "CLUSTER_1")
            envs = [
              {
                cluster_name = the actual cluster name that cassandra cluster defines itself by. These Clusters are the DTAP for certain group (ex. "CLUSTER_1_DEV")
                graphana = the host name of graphana. format is "serverHostname:port"
                graphite = [    a list of dictionaries. The first one resulting in a response with data will be used.
                    {           dictionary of template arguments for hubble.graphite.plot.url_template string
                        key=value  definition of template arguments
                    }
                ]
                hosts = [
                  hosts list for connecting to Cassandra (e.g. "hostname1,hostname2")
                ]
                port = port used to connect to Cassandra (e.g. 9042)
                pword = the password to connect to Cassandra
                uname = the user to connect to Cassandra
                opscenter = the host name of opscenter. format is "protocol://serverHostname:port", for example: "https://opscenter.intranet.nl"
                ops_pword = password for the opsCenter Server
                ops_uname = username for the opsCenter Server
                sequence = Order by which the clusters within a group should be processed and shown in confluence
              }
              ]
          }
        ]
     username_regex = the regex the user names need to comply with
     username_suffixes = the set of user name suffixes that are both expected and required
  }
  confluence {
    user = the user used for connecting to Confluence
    password = the password used for connecting to Confluence
    endpointaddress = the url of the Confluence SOAP endpoint (e.g. "https://hostname/plugins/servlet/soap-axis1/confluenceservice-v2")
    space = the Confluence space where you want to write the pages to (e.g. "CASSANDRA")
  }
  graphite{
    plot{
      header = the header to show above the graph, created using the following url template
      url_template = the string template in which '${key}' will be replaced by value's defined in the hubble.cassandra.clusters.graphite dictionary.
                     The result will be used on the cluster confluence pages as an image source
    }
    username = the user used for http authorizing to graphite for metric retrieval
    password = the passoword for http authorizing to graphite for metric retrieval
    cluster_metrics = [
        {
            name =    the name of the metric, used to show it in results/messages, the code appends "&rawData=true" to the url
            url =     the graphite url template, in which '${key}' will be replaced by the corresponding value defined in the hubble.cassandra.clusters.graphite map
                      furthermore, ${cluster} will be replaced by the cluster name for which metrics are collected
            func =    optional string identifier of the aggregation function
                      one of {"max","min","avg","delta"}
                      delta takes last - first value
                      the function is applied to each serie returned by graphite to obtain one value per serie
                      subsequently, the function is applied to all series, to obtain one value for this metric
            format =  optional string identifier of the value formatting function
                      default is the toString method,
                      alternatively one can use 'bytecount' to get TB/GB/MB/KB
            warnings = [ optional (default empty) list of warnings to be triggered based on the retrieved graphite metric
                 {
                  name =        the name of the warning
                  details =     the detailed description of the warning, the same template key's can be used as in the url.
                                furthermore, ${value} will be replaced by the metric value
                  comparison =  the comparison used, can be one of :
                                'gt' (greater than),
                                'lt' (less than),
                                'eq' (equal),
                                'neq' not equal
                  threshold =   the (numeric) limit to which the metric is compared. A warning will be created if  [received_value] [comparison] [threshold] is true.
                }
            ]
            errors = [ optional (default empty) list of errors to be triggered based on the retrieved graphite metric
                 {
                  name =        the name of the warning
                  details =     the detailed description of the warning, the same template key's can be used as in the url.
                                furthermore, ${value} will be replaced by the metric value
                  comparison =  the comparison used, can be one of :
                                'gt' (greater than),
                                'lt' (less than),
                                'eq' (equal),
                                'neq' not equal
                  threshold =   the (numeric) limit to which the metric is compared. A warning will be created if  [received_value] [comparison] [threshold] is true.
                }
            ]
        }
    ]
    keyspace_metrics = [
        {
            name =    the name of the metric, used to show it in results/messages, the code appends "&rawData=true" to the url
            url =     the graphite url template, in which '${key}' will be replaced by the corresponding value defined in the hubble.cassandra.clusters.graphite map
                      furthermore, ${keyspace} will be replaced by the keyspace for which metrics are collected
            func =    optional string identifier of the aggregation function
                      one of {"max","min","avg","delta"}
                      delta takes last - first value
                      the function is applied to each serie returned by graphite to obtain one value per serie
                      subsequently, the function is applied to all series, to obtain one value for this metric
            format =  optional string identifier of the value formatting function
                      default is the toString method, alternatively one can use 'bytecount' to get TB/GB/MB/KB
            warnings = [ optional (default empty) list of warnings to be triggered based on the retrieved graphite metric
                 {
                  name =        the name of the warning
                  details =     the detailed description of the warning, the same template key's can be used as in the url.
                                furthermore, ${value} will be replaced by the metric value
                  comparison =  the comparison used, can be one of :
                                'gt' (greater than),
                                'lt' (less than),
                                'eq' (equal),
                                'neq' not equal
                  threshold =   the (numeric) limit to which the metric is compared. A warning will be created if  [received_value] [comparison] [threshold] is true.
                }
            ]
            errors = [ optional (default empty) list of errors to be triggered based on the retrieved graphite metric
                 {
                  name =        the name of the warning
                  details =     the detailed description of the warning, the same template key's can be used as in the url.
                                furthermore, ${value} will be replaced by the metric value
                  comparison =  the comparison used, can be one of :
                                'gt' (greater than),
                                'lt' (less than),
                                'eq' (equal),
                                'neq' not equal
                  threshold =   the (numeric) limit to which the metric is compared. A warning will be created if  [received_value] [comparison] [threshold] is true.
                }
            ]
        }
    ]
  }
}