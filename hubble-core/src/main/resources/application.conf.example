hubble {
  cassandra {
     clusters = [
          {
            name = the group name that defines different environments of the same type of cluster this name is also the space you want to write to (e.g. "CLUSTER_1")
            envs = [
              {
                cluster_name = the actual cluster name that cassandra cluster defines itself by. These Clusters are the DTAP for certain group (ex. "CLUSTER_1_DEV")
                graphana = the host name of graphana. format is "serverHostname:port"
                graphite = { dictionary of template arguments for hubble.graphite.url_template string
                    key: value style definition of template arguments
                }
                hosts = [
                  hosts list for connecting to Cassandra (e.g. "hostname1,hostname2")
                ]
                port = port used to connect to Cassandra (e.g. 9042)
                pword = the password to connect to Cassandra
                uname = the user to connect to Cassandra
                opscenter = the host name of opscenter. format is "serverHostname:port"
                ops_pword = password for the opsCenter Server
                ops_uname = username for the opsCenter Server
                sequence = Order by which the clusters within a group should be processed and shown in confluence
              }
              ]
          }
        ]
  }
  confluence {
    user = the user used for connecting to Confluence
    password = the password used for connecting to Confluence
    endpointaddress = the url of the Confluence SOAP endpoint (e.g. "https://hostname/plugins/servlet/soap-axis1/confluenceservice-v2")
    space = the Confluence space where you want to write the pages to (e.g. "CASSANDRA")
  }
  graphite{
    url_template = the string template in which '${key}' will be replaced by value's defined in the hubble.cassandra.clusters.graphite dictionary
    username = the user used for http authorizing to graphite for metric retrieval
    password = the passoword for http authorizing to graphite for metric retrieval
    metrics = [
        {
            name =    the name of the metric, used to show it in results/messages, the code appends "&rawData=true" to the url
            url =     the graphite url template, in which '${key}' will be replaced by the corresponding value defined in the hubble.cassandra.clusters.graphite map
            func =    optional string identifier of the aggregation function
                      one of {"max","min","avg"}
                      the function is applied to each serie returned by graphite to obtain one value per serie
                      subsequently, the function is applied to all series, to obtain one value for this metric
        }
    ]
  }
}